#!/bin/sh

set -e

log() {
    logger -s -t "flame_ec2_init" "$1"
}

detect_package_manager() {
    if command -v apt-get >/dev/null 2>&1; then
        echo "apt"
    elif command -v yum >/dev/null 2>&1; then
        echo "yum"
    elif command -v dnf >/dev/null 2>&1; then
        echo "dnf"
    else
        echo "unknown"
        exit 1
    fi
}

check_required_packages() {
    missing_packages=0
    for pkg in tar gzip unzip; do
        if ! command -v $pkg >/dev/null 2>&1; then
            log "Package $pkg is missing"
            missing_packages=1
        fi
    done
    return $missing_packages
}

install_packages() {
    if check_required_packages; then
        log "All required packages already installed, skipping package installation"
        return 0
    fi

    pm=$(detect_package_manager)
    log "Installing missing packages using $pm..."

    case $pm in
        "apt")
            export DEBIAN_FRONTEND=noninteractive
            apt-get update -qq || {
                log "Failed to update apt repositories"
                exit 1
            }
            apt-get install -y -qq tar gzip unzip || {
                log "Failed to install required packages"
                exit 1
            }
            ;;
        "yum"|"dnf")
            $pm update -y -q || {
                log "Failed to update $pm repositories"
                exit 1
            }
            $pm install -y -q tar gzip unzip || {
                log "Failed to install required packages"
                exit 1
            }
            ;;
    esac
}

install_aws_cli() {
    if command -v aws >/dev/null 2>&1; then
        log "AWS CLI already installed, skipping installation"
        return 0
    fi

    log "Installing AWS CLI..."
    curl -s "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    unzip -q awscliv2.zip
    ./aws/install --update >/dev/null 2>&1
    rm -rf aws awscliv2.zip
}

log "Initializing EC2 Flame Node for <%= @app %>"

log "Installing required packages..."

install_packages
install_aws_cli

if ! command -v aws >/dev/null 2>&1; then
    log "AWS CLI installation failed"
    exit 1
fi

aws configure set default.region <%= @aws_region %>

S3_URL=<%= @s3_bundle_url %>
APP_DIR="/srv/<%= @app %>"
SERVICE_NAME=<%= @app %>
RELEASE_DIR="${APP_DIR}/release"

mkdir -p "${APP_DIR}" "${RELEASE_DIR}" || {
    log "Failed to create required directories"
    exit 1
}

cd "${APP_DIR}" || {
    log "Failed to change to ${APP_DIR}"
    exit 1
}

log "Downloading from S3: ${S3_URL}"

<%= if @s3_bundle_compressed? do %>
aws s3 cp ${S3_URL} ./release.tar.gz --quiet || {
    log "Failed to download from S3"
    exit 1
}
tar xzf release.tar.gz -C ${RELEASE_DIR} || {
    log "Failed to extract release.tar.gz"
    rm -f release.tar.gz
    exit 1
}
rm release.tar.gz
<% else %>
aws s3 sync ${S3_URL} . --quiet || {
    log "Failed to download from S3"
    exit 1
}
<% end %>

if [ ! -d "${RELEASE_DIR}" ] || [ ! -x "${RELEASE_DIR}/bin/<%= @app %>" ]; then
    log "Release directory or executable not found after extraction"
    exit 1
fi

INSTANCE_IP=$(hostname -i)

if ! cat > ${APP_DIR}/env << EOF
<%= @env %>
INSTANCE_IP=${INSTANCE_IP}
EOF
then
    log "Failed to create env file"
    exit 1
fi

if ! cat > /etc/systemd/system/${SERVICE_NAME}.service << EOF
<%= @systemd_service %>
EOF
then
    log "Failed to create systemd service file"
    exit 1
fi

chmod 755 "${APP_DIR}" || {
    log "Failed to set permissions on ${APP_DIR}"
    exit 1
}

systemctl daemon-reload || {
    log "Failed to reload systemd"
    exit 1
}

systemctl enable "${SERVICE_NAME}" || {
    log "Failed to enable ${SERVICE_NAME} service"
    exit 1
}

systemctl start "${SERVICE_NAME}" || {
    log "Failed to start ${SERVICE_NAME} service"
    exit 1
}

if ! systemctl is-active --quiet "${SERVICE_NAME}"; then
    log "Service failed to start. Check journalctl for details."
    exit 1
fi

log "EC2 Flame Node initialization completed successfully"
